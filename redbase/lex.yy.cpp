
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 31
#define YY_END_OF_BUFFER 32
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[435] =
    {   0,
        0,    0,   32,   30,   28,   28,   27,   10,    8,    9,
        7,    3,    5,    6,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   28,   27,    0,
        0,    3,   29,   29,    4,   29,   29,   29,   29,   29,
       29,   29,   13,   29,   25,   29,   29,   29,    0,    1,
        2,   29,   29,    4,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,    0,   29,   29,    4,
       29,   29,   29,   15,   29,   26,   17,   20,   19,   29,
       29,   29,    0,   29,   29,    4,   29,   29,   29,   29,
       21,   11,   18,    0,   29,   12,    4,   14,   29,   16,

       29,    0,   29,    4,   29,   29,    0,   29,    4,   29,
       22,    0,   29,    4,   29,   29,    0,   29,    4,   29,
       29,    0,   29,    4,   29,   29,    0,   29,    4,   29,
       23,    0,   29,    4,   24,    0,   29,    4,    0,   29,
        4,    0,   29,    4,    0,   29,    4,    0,   29,    4,
        0,   29,    4,    0,   29,    4,    0,   29,    4,    0,
       29,    4,    0,   29,    4,    0,   29,    4,    0,   29,
        4,    0,   29,    4,    0,   29,    4,    0,   29,    4,
        0,   29,    4,    0,   29,    4,    0,   29,    4,    0,
       29,    4,    0,   29,    4,    0,   29,    4,    0,   29,

        4,    0,   29,    4,    0,   29,    4,    0,   29,    4,
        0,   29,    4,    0,   29,    4,    0,    4,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    1,    6,
        7,    1,    1,    8,    1,    9,    1,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,   11,    1,
       12,    1,    1,    1,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
        1,    1,    1,    1,   14,    1,   15,   16,   17,   18,

       19,   20,   13,   21,   22,   23,   13,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   13,   13,   34,
       13,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[35] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    4,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[730] =
    {   0,
        0,    0, 1217, 1218,   33,   35,    0,    0, 1218, 1218,
     1218,   30, 1218, 1218,    0, 1183,   31,   23,   14,   34,
     1196,   35, 1187, 1187, 1182, 1192, 1195,   44,    0, 1204,
     1198,   40,    0, 1187, 1196,   32, 1181, 1177, 1170, 1180,
     1174, 1176,    0, 1184,    0, 1176, 1166, 1180, 1190, 1218,
     1184,    0, 1173, 1182, 1176, 1159, 1170, 1160, 1165, 1154,
     1160, 1156, 1165, 1156, 1162, 1156, 1174,    0, 1159, 1167,
     1144, 1144, 1142,    0, 1150,    0,    0,    0,    0, 1140,
     1139, 1151, 1164,    0, 1138, 1157, 1147, 1151, 1145, 1136,
        0,    0,    0, 1157,    0,    0, 1151,    0, 1132,    0,

     1137, 1153,    0, 1147, 1126, 1129, 1149,    0, 1143, 1125,
     1137, 1145,    0, 1139, 1130, 1120, 1141,    0, 1135, 1111,
     1115, 1137,    0, 1131, 1123, 1107, 1133,    0, 1127, 1104,
        0, 1130,    0, 1124,    0, 1128,    0, 1122, 1126,    0,
     1120, 1124,    0, 1118, 1122,    0, 1116, 1120,    0, 1114,
     1118,    0, 1112, 1116,    0, 1110, 1114,    0, 1108, 1112,
        0, 1106, 1110,    0, 1104, 1108,    0, 1102, 1106,    0,
     1100, 1104,    0, 1098, 1102,    0, 1096, 1100,    0, 1094,
     1098,    0, 1092, 1096,    0, 1090, 1094,    0, 1088, 1092,
        0, 1086, 1090,    0, 1084, 1088,    0, 1082, 1086,    0,

     1080, 1084,    0, 1076, 1077,    0, 1068, 1069,    0, 1060,
     1061,    0, 1052, 1053, 1218, 1044, 1045, 1036, 1037, 1033,
     1029, 1025, 1021, 1017, 1013, 1009, 1005, 1001,  997,  993,
      989,  985,  981,  977,  973,  969,  965,  961,  957,  953,
      949,  945,  941,  937,  933,  929,  925,  921,  917,  913,
      909,  905,  901,  897,  893,  889,  885,  881,  877,  873,
      869,  865,  861,  857,  853,  849,  845,  841,  837,  833,
      829,  825,  821,  817,  813,  809,  805,  801,  797,  793,
      789,  785,  781,  777,  773,  769,  765,  761,  757,  753,
      749,  745,  741,  737,  733,  729,  725,  721,  717,  713,

      709,  705,  701,  697,  693,  689,  685,  681,  677,  673,
      669,  665,  661,  657,  653,  649,  645,  641,  637,  633,
      629,  625,  621,  617,  613,  609,  605,  601,  597,  593,
      589,  585,  581,  577,  573,  569,  565,  561,  557,  553,
      549,  545,  541,  537,  533,  529,  525,  521,  517,  513,
      509,  505,  501,  497,  493,  489,  485,  481,  477,  473,
      469,  465,  461,  457,  453,  449,  445,  441,  437,  433,
      429,  425,  421,  417,  413,  409,  405,  401,  397,  393,
      389,  385,  381,  377,  373,  369,  365,  361,  357,  353,
      349,  345,  341,  337,  333,  329,  325,  321,  317,  313,

      309,  305,  301,  297,  293,  289,  285,  281,  277,  273,
      269,  265,  261,  257,  253,  249,  245,  241,  237,  233,
      229,  225,  221,  217,  213,  209,  205,  201,  197,  193,
      189,  185,  181, 1218,   64,   68,  178,   72,  174,   76,
      170,   80,  166,   84,  162,   88,  158,   92,  154,   96,
      150,  100,  146,  104,  142,  108,  138,  112,  134,  116,
      130,  120,  126,  124,  122,  128,  118,  132,  114,  136,
      110,  140,  106,  144,  102,  148,   98,  152,   94,  156,
       90,  160,   86,  164,   82,  168,   78,  172,   74,  176,
       70,  180,   67,  184,   66,  188,   62,  192,   59,  196,

       56,  200,   54,  204,   53,  208,   52,  212,   51,  216,
       50,  220,   48,  224,  228,  232,  236,  240,  244,  248,
      252,  256,  260,  264,  268,  272,  276,  280,  284,  288,
      292,  296,  300,  304,  308,  312,  316,  320,  324,  328,
      332,  336,  340,  344,  348,  352,  356,  360,  364,  368,
      372,  376,  380,  384,  388,  392,  396,  400,  404,  408,
      412,  416,  420,  424,  428,  432,  436,  440,  444,  448,
      452,  456,  460,  464,  468,  472,  476,  480,  484,  488,
      492,  496,  500,  504,  508,  512,  516,  520,  524,  528,
      532,  536,  540,  544,  548,  552,  556,  560,  564,  568,

      572,  576,  580,  584,  588,  592,  596,  600,  604,  608,
      612,  616,  620,  624,  628,  632,  636,  640,  644,  648,
      652,  656,  660,  664,  668,  672,  676,  680,  684,  688,
      692,  696,  700,  704,  708,  712,  716,  720,  724,  728,
      732,  736,  740,  744,  748,  752,  756,  760,  764,  768,
      772,  776,  780,  784,  788,  792,  796,  800,  804,  808,
      812,  816,  820,  824,  828,  832,  836,  840,  844,  848,
      852,  856,  860,  864,  868,  872,  876,  880,  884,  888,
      892,  896,  900,  904,  908,  912,  916,  920,  924,  928,
      932,  936,  940,  944,  948,  952,  956,  960,  964,  968,

      972,  976,  980,  984,  988,  992,  996, 1000, 1004, 1008,
     1012, 1016, 1020, 1024, 1028, 1032, 1036, 1040, 1044, 1048,
     1052, 1056, 1060, 1064, 1068, 1072, 1076, 1080, 1084
    } ;

static yyconst flex_int16_t yy_def[730] =
    {   0,
      434,    1,  434,  434,  434,  434,  435,  436,  434,  434,
      434,  434,  434,  434,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  434,  435,  438,
      434,  434,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  440,  434,
      434,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  442,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  444,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  446,  447,  447,  447,  447,  447,  447,

      447,  448,  449,  449,  449,  449,  450,  451,  451,  451,
      451,  452,  453,  453,  453,  453,  454,  455,  455,  455,
      455,  456,  457,  457,  457,  457,  458,  459,  459,  459,
      459,  460,  461,  461,  461,  462,  463,  463,  464,  465,
      465,  466,  467,  467,  468,  469,  469,  470,  471,  471,
      472,  473,  473,  474,  475,  475,  476,  477,  477,  478,
      479,  479,  480,  481,  481,  482,  483,  483,  484,  485,
      485,  486,  487,  487,  488,  489,  489,  490,  491,  491,
      492,  493,  493,  494,  495,  495,  496,  497,  497,  498,
      499,  499,  500,  501,  501,  502,  503,  503,  504,  505,

      505,  506,  507,  507,  508,  509,  509,  510,  511,  511,
      512,  513,  513,  514,  434,  434,  515,  434,  516,  517,
      518,  519,  520,  521,  522,  523,  524,  525,  526,  527,
      528,  529,  530,  531,  532,  533,  534,  535,  536,  537,
      538,  539,  540,  541,  542,  543,  544,  545,  546,  547,
      548,  549,  550,  551,  552,  553,  554,  555,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      568,  569,  570,  571,  572,  573,  574,  575,  576,  577,
      578,  579,  580,  581,  582,  583,  584,  585,  586,  587,
      588,  589,  590,  591,  592,  593,  594,  595,  596,  597,

      598,  599,  600,  601,  602,  603,  604,  605,  606,  607,
      608,  609,  610,  611,  612,  613,  614,  615,  616,  617,
      618,  619,  620,  621,  622,  623,  624,  625,  626,  627,
      628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
      638,  639,  640,  641,  642,  643,  644,  645,  646,  647,
      648,  649,  650,  651,  652,  653,  654,  655,  656,  657,
      658,  659,  660,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  675,  676,  677,
      678,  679,  680,  681,  682,  683,  684,  685,  686,  687,
      688,  689,  690,  691,  692,  693,  694,  695,  696,  697,

      698,  699,  700,  701,  702,  703,  704,  705,  706,  707,
      708,  709,  710,  711,  712,  713,  714,  715,  716,  717,
      718,  719,  720,  721,  722,  723,  724,  725,  726,  727,
      728,  729,  434,    0,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434
    } ;

static yyconst flex_int16_t yy_nxt[1253] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    4,   12,
       13,   14,   15,   15,   15,   16,   17,   18,   19,   20,
       21,   22,   15,   23,   15,   15,   24,   25,   15,   26,
       15,   27,   15,   15,   28,   28,   28,   28,   31,   32,
       35,   37,   39,   35,   35,   28,   28,   40,   31,   32,
       55,  215,   38,  212,  209,  206,  203,  200,   56,  197,
       36,   43,  194,   41,   29,  191,   29,   29,   30,  188,
      185,   30,   49,  182,   49,   49,   67,  179,   67,   67,
       83,  176,   83,   83,   94,  173,   94,   94,  102,  170,
      102,  102,  107,  167,  107,  107,  112,  164,  112,  112,

      117,  161,  117,  117,  122,  158,  122,  122,  127,  155,
      127,  127,  132,  152,  132,  132,  136,  149,  136,  136,
      139,  146,  139,  139,  142,  143,  142,  142,  145,  140,
      145,  145,  148,  137,  148,  148,  151,  133,  151,  151,
      154,  128,  154,  154,  157,  123,  157,  157,  160,  118,
      160,  160,  163,  113,  163,  163,  166,  108,  166,  166,
      169,  103,  169,  169,  172,   95,  172,  172,  175,   84,
      175,  175,  178,   68,  178,  178,  181,   52,  181,  181,
      184,   33,  184,  184,  187,   50,  187,  187,  190,   50,
      190,  190,  193,   50,  193,  193,  196,   50,  196,  196,

      199,   50,  199,  199,  202,   50,  202,  202,  205,   50,
      205,  205,  208,   50,  208,  208,  211,   50,  211,  211,
      214,   50,  214,  214,  217,   50,  217,  217,  219,   50,
      219,  219,  220,   50,  220,  220,  221,   50,  221,  221,
      222,   50,  222,  222,  223,   50,  223,  223,  224,   50,
      224,  224,  225,   50,  225,  225,  226,   50,  226,  226,
      227,   50,  227,  227,  228,   50,  228,  228,  229,   50,
      229,  229,  230,   50,  230,  230,  231,   50,  231,  231,
      232,   50,  232,  232,  233,   50,  233,  233,  234,   50,
      234,  234,  235,   50,  235,  235,  236,   50,  236,  236,

      237,   50,  237,  237,  238,   50,  238,  238,  239,   50,
      239,  239,  240,   50,  240,  240,  241,   50,  241,  241,
      242,   50,  242,  242,  243,   50,  243,  243,  244,   50,
      244,  244,  245,   50,  245,  245,  246,   50,  246,  246,
      247,   50,  247,  247,  248,   50,  248,  248,  249,   50,
      249,  249,  250,   50,  250,  250,  251,   50,  251,  251,
      252,   50,  252,  252,  253,   50,  253,  253,  254,   50,
      254,  254,  255,   50,  255,  255,  256,   50,  256,  256,
      257,   50,  257,  257,  258,   50,  258,  258,  259,   50,
      259,  259,  260,   50,  260,  260,  261,   50,  261,  261,

      262,   50,  262,  262,  263,   50,  263,  263,  264,   50,
      264,  264,  265,   50,  265,  265,  266,   50,  266,  266,
      267,   50,  267,  267,  268,   50,  268,  268,  269,   50,
      269,  269,  270,   50,  270,  270,  271,   50,  271,  271,
      272,   50,  272,  272,  273,   50,  273,  273,  274,   50,
      274,  274,  275,   50,  275,  275,  276,   50,  276,  276,
      277,   50,  277,  277,  278,   50,  278,  278,  279,   50,
      279,  279,  280,   50,  280,  280,  281,   50,  281,  281,
      282,   50,  282,  282,  283,   50,  283,  283,  284,   50,
      284,  284,  285,   50,  285,  285,  286,   50,  286,  286,

      287,   50,  287,  287,  288,   50,  288,  288,  289,   50,
      289,  289,  290,   50,  290,  290,  291,   50,  291,  291,
      292,   50,  292,  292,  293,   50,  293,  293,  294,   50,
      294,  294,  295,   50,  295,  295,  296,   50,  296,  296,
      297,   50,  297,  297,  298,   50,  298,  298,  299,   50,
      299,  299,  300,   50,  300,  300,  301,   50,  301,  301,
      302,   50,  302,  302,  303,   50,  303,  303,  304,   50,
      304,  304,  305,   50,  305,  305,  306,   50,  306,  306,
      307,   50,  307,  307,  308,   50,  308,  308,  309,   50,
      309,  309,  310,   50,  310,  310,  311,   50,  311,  311,

      312,   50,  312,  312,  313,   50,  313,  313,  314,   50,
      314,  314,  315,   50,  315,  315,  316,   50,  316,  316,
      317,   50,  317,  317,  318,   50,  318,  318,  319,   50,
      319,  319,  320,   50,  320,  320,  321,   50,  321,  321,
      322,   50,  322,  322,  323,   50,  323,  323,  324,   50,
      324,  324,  325,   50,  325,  325,  326,   50,  326,  326,
      327,   50,  327,  327,  328,   50,  328,  328,  329,   50,
      329,  329,  330,   50,  330,  330,  331,   50,  331,  331,
      332,   50,  332,  332,  333,   50,  333,  333,  334,   50,
      334,  334,  335,   50,  335,  335,  336,   50,  336,  336,

      337,   50,  337,  337,  338,   50,  338,  338,  339,   50,
      339,  339,  340,   50,  340,  340,  341,   50,  341,  341,
      342,   50,  342,  342,  343,   50,  343,  343,  344,   50,
      344,  344,  345,   50,  345,  345,  346,   50,  346,  346,
      347,   50,  347,  347,  348,   50,  348,  348,  349,   50,
      349,  349,  350,   50,  350,  350,  351,   50,  351,  351,
      352,   50,  352,  352,  353,   50,  353,  353,  354,   50,
      354,  354,  355,   50,  355,  355,  356,   50,  356,  356,
      357,   50,  357,  357,  358,   50,  358,  358,  359,   50,
      359,  359,  360,   50,  360,  360,  361,   50,  361,  361,

      362,   50,  362,  362,  363,   50,  363,  363,  364,   50,
      364,  364,  365,   50,  365,  365,  366,   50,  366,  366,
      367,   50,  367,  367,  368,   50,  368,  368,  369,   50,
      369,  369,  370,   50,  370,  370,  371,   50,  371,  371,
      372,   50,  372,  372,  373,   50,  373,  373,  374,   50,
      374,  374,  375,   50,  375,  375,  376,   50,  376,  376,
      377,   50,  377,  377,  378,   50,  378,  378,  379,   50,
      379,  379,  380,   50,  380,  380,  381,   50,  381,  381,
      382,   50,  382,  382,  383,   50,  383,  383,  384,   50,
      384,  384,  385,   50,  385,  385,  386,   50,  386,  386,

      387,   50,  387,  387,  388,   50,  388,  388,  389,   50,
      389,  389,  390,   50,  390,  390,  391,   50,  391,  391,
      392,   50,  392,  392,  393,   50,  393,  393,  394,   50,
      394,  394,  395,   50,  395,  395,  396,   50,  396,  396,
      397,   50,  397,  397,  398,   50,  398,  398,  399,   50,
      399,  399,  400,   50,  400,  400,  401,   50,  401,  401,
      402,   50,  402,  402,  403,   50,  403,  403,  404,   50,
      404,  404,  405,   50,  405,  405,  406,   50,  406,  406,
      407,   50,  407,  407,  408,   50,  408,  408,  409,   50,
      409,  409,  410,   50,  410,  410,  411,   50,  411,  411,

      412,   50,  412,  412,  413,   50,  413,  413,  414,   50,
      414,  414,  415,   50,  415,  415,  416,   50,  416,  416,
      417,   50,  417,  417,  418,   50,  418,  418,  419,   50,
      419,  419,  420,   50,  420,  420,  421,   50,  421,  421,
      422,   50,  422,  422,  423,  218,  423,  423,  424,   50,
      424,  424,  425,  218,  425,  425,  426,   50,  426,  426,
      427,  216,  427,  427,  428,   50,  428,  428,  429,  213,
      429,  429,  430,   50,  430,  430,  431,  210,  431,  431,
      432,   50,  432,  432,  433,  207,  433,  433,   50,  204,
       50,  201,   50,  198,   50,  195,   50,  192,   50,  189,

       50,  186,   50,  183,   50,  180,   50,  177,   50,  174,
       50,  171,   50,  168,   50,  165,   50,  162,   50,  159,
       50,  156,   50,  153,   50,  150,   50,  147,   50,  144,
       50,  141,   50,  138,   50,  135,  134,   50,  131,  130,
      129,   50,  126,  125,  124,   50,  121,  120,  119,   50,
      116,  115,  114,   50,  111,  110,  109,   50,  106,  105,
      104,   50,  101,  100,   99,   98,   97,   96,   50,   93,
       92,   91,   90,   89,   88,   87,   86,   85,   50,   82,
       81,   80,   79,   78,   77,   76,   75,   74,   73,   72,
       71,   70,   69,   51,   50,   66,   65,   64,   63,   62,

       61,   60,   59,   58,   57,   54,   53,   51,   50,   48,
       47,   46,   45,   44,   42,   34,  434,    3,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434
    } ;

static yyconst flex_int16_t yy_chk[1253] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    6,    6,   12,   12,
       17,   18,   19,   20,   22,   28,   28,   19,   32,   32,
       36,  513,   18,  511,  509,  507,  505,  503,   36,  501,
       17,   22,  499,   20,  435,  497,  435,  435,  436,  495,
      493,  436,  438,  491,  438,  438,  440,  489,  440,  440,
      442,  487,  442,  442,  444,  485,  444,  444,  446,  483,
      446,  446,  448,  481,  448,  448,  450,  479,  450,  450,

      452,  477,  452,  452,  454,  475,  454,  454,  456,  473,
      456,  456,  458,  471,  458,  458,  460,  469,  460,  460,
      462,  467,  462,  462,  464,  465,  464,  464,  466,  463,
      466,  466,  468,  461,  468,  468,  470,  459,  470,  470,
      472,  457,  472,  472,  474,  455,  474,  474,  476,  453,
      476,  476,  478,  451,  478,  478,  480,  449,  480,  480,
      482,  447,  482,  482,  484,  445,  484,  484,  486,  443,
      486,  486,  488,  441,  488,  488,  490,  439,  490,  490,
      492,  437,  492,  492,  494,  433,  494,  494,  496,  432,
      496,  496,  498,  431,  498,  498,  500,  430,  500,  500,

      502,  429,  502,  502,  504,  428,  504,  504,  506,  427,
      506,  506,  508,  426,  508,  508,  510,  425,  510,  510,
      512,  424,  512,  512,  514,  423,  514,  514,  515,  422,
      515,  515,  516,  421,  516,  516,  517,  420,  517,  517,
      518,  419,  518,  518,  519,  418,  519,  519,  520,  417,
      520,  520,  521,  416,  521,  521,  522,  415,  522,  522,
      523,  414,  523,  523,  524,  413,  524,  524,  525,  412,
      525,  525,  526,  411,  526,  526,  527,  410,  527,  527,
      528,  409,  528,  528,  529,  408,  529,  529,  530,  407,
      530,  530,  531,  406,  531,  531,  532,  405,  532,  532,

      533,  404,  533,  533,  534,  403,  534,  534,  535,  402,
      535,  535,  536,  401,  536,  536,  537,  400,  537,  537,
      538,  399,  538,  538,  539,  398,  539,  539,  540,  397,
      540,  540,  541,  396,  541,  541,  542,  395,  542,  542,
      543,  394,  543,  543,  544,  393,  544,  544,  545,  392,
      545,  545,  546,  391,  546,  546,  547,  390,  547,  547,
      548,  389,  548,  548,  549,  388,  549,  549,  550,  387,
      550,  550,  551,  386,  551,  551,  552,  385,  552,  552,
      553,  384,  553,  553,  554,  383,  554,  554,  555,  382,
      555,  555,  556,  381,  556,  556,  557,  380,  557,  557,

      558,  379,  558,  558,  559,  378,  559,  559,  560,  377,
      560,  560,  561,  376,  561,  561,  562,  375,  562,  562,
      563,  374,  563,  563,  564,  373,  564,  564,  565,  372,
      565,  565,  566,  371,  566,  566,  567,  370,  567,  567,
      568,  369,  568,  568,  569,  368,  569,  569,  570,  367,
      570,  570,  571,  366,  571,  571,  572,  365,  572,  572,
      573,  364,  573,  573,  574,  363,  574,  574,  575,  362,
      575,  575,  576,  361,  576,  576,  577,  360,  577,  577,
      578,  359,  578,  578,  579,  358,  579,  579,  580,  357,
      580,  580,  581,  356,  581,  581,  582,  355,  582,  582,

      583,  354,  583,  583,  584,  353,  584,  584,  585,  352,
      585,  585,  586,  351,  586,  586,  587,  350,  587,  587,
      588,  349,  588,  588,  589,  348,  589,  589,  590,  347,
      590,  590,  591,  346,  591,  591,  592,  345,  592,  592,
      593,  344,  593,  593,  594,  343,  594,  594,  595,  342,
      595,  595,  596,  341,  596,  596,  597,  340,  597,  597,
      598,  339,  598,  598,  599,  338,  599,  599,  600,  337,
      600,  600,  601,  336,  601,  601,  602,  335,  602,  602,
      603,  334,  603,  603,  604,  333,  604,  604,  605,  332,
      605,  605,  606,  331,  606,  606,  607,  330,  607,  607,

      608,  329,  608,  608,  609,  328,  609,  609,  610,  327,
      610,  610,  611,  326,  611,  611,  612,  325,  612,  612,
      613,  324,  613,  613,  614,  323,  614,  614,  615,  322,
      615,  615,  616,  321,  616,  616,  617,  320,  617,  617,
      618,  319,  618,  618,  619,  318,  619,  619,  620,  317,
      620,  620,  621,  316,  621,  621,  622,  315,  622,  622,
      623,  314,  623,  623,  624,  313,  624,  624,  625,  312,
      625,  625,  626,  311,  626,  626,  627,  310,  627,  627,
      628,  309,  628,  628,  629,  308,  629,  629,  630,  307,
      630,  630,  631,  306,  631,  631,  632,  305,  632,  632,

      633,  304,  633,  633,  634,  303,  634,  634,  635,  302,
      635,  635,  636,  301,  636,  636,  637,  300,  637,  637,
      638,  299,  638,  638,  639,  298,  639,  639,  640,  297,
      640,  640,  641,  296,  641,  641,  642,  295,  642,  642,
      643,  294,  643,  643,  644,  293,  644,  644,  645,  292,
      645,  645,  646,  291,  646,  646,  647,  290,  647,  647,
      648,  289,  648,  648,  649,  288,  649,  649,  650,  287,
      650,  650,  651,  286,  651,  651,  652,  285,  652,  652,
      653,  284,  653,  653,  654,  283,  654,  654,  655,  282,
      655,  655,  656,  281,  656,  656,  657,  280,  657,  657,

      658,  279,  658,  658,  659,  278,  659,  659,  660,  277,
      660,  660,  661,  276,  661,  661,  662,  275,  662,  662,
      663,  274,  663,  663,  664,  273,  664,  664,  665,  272,
      665,  665,  666,  271,  666,  666,  667,  270,  667,  667,
      668,  269,  668,  668,  669,  268,  669,  669,  670,  267,
      670,  670,  671,  266,  671,  671,  672,  265,  672,  672,
      673,  264,  673,  673,  674,  263,  674,  674,  675,  262,
      675,  675,  676,  261,  676,  676,  677,  260,  677,  677,
      678,  259,  678,  678,  679,  258,  679,  679,  680,  257,
      680,  680,  681,  256,  681,  681,  682,  255,  682,  682,

      683,  254,  683,  683,  684,  253,  684,  684,  685,  252,
      685,  685,  686,  251,  686,  686,  687,  250,  687,  687,
      688,  249,  688,  688,  689,  248,  689,  689,  690,  247,
      690,  690,  691,  246,  691,  691,  692,  245,  692,  692,
      693,  244,  693,  693,  694,  243,  694,  694,  695,  242,
      695,  695,  696,  241,  696,  696,  697,  240,  697,  697,
      698,  239,  698,  698,  699,  238,  699,  699,  700,  237,
      700,  700,  701,  236,  701,  701,  702,  235,  702,  702,
      703,  234,  703,  703,  704,  233,  704,  704,  705,  232,
      705,  705,  706,  231,  706,  706,  707,  230,  707,  707,

      708,  229,  708,  708,  709,  228,  709,  709,  710,  227,
      710,  710,  711,  226,  711,  711,  712,  225,  712,  712,
      713,  224,  713,  713,  714,  223,  714,  714,  715,  222,
      715,  715,  716,  221,  716,  716,  717,  220,  717,  717,
      718,  219,  718,  718,  719,  218,  719,  719,  720,  217,
      720,  720,  721,  216,  721,  721,  722,  214,  722,  722,
      723,  213,  723,  723,  724,  211,  724,  724,  725,  210,
      725,  725,  726,  208,  726,  726,  727,  207,  727,  727,
      728,  205,  728,  728,  729,  204,  729,  729,  202,  201,
      199,  198,  196,  195,  193,  192,  190,  189,  187,  186,

      184,  183,  181,  180,  178,  177,  175,  174,  172,  171,
      169,  168,  166,  165,  163,  162,  160,  159,  157,  156,
      154,  153,  151,  150,  148,  147,  145,  144,  142,  141,
      139,  138,  136,  134,  132,  130,  129,  127,  126,  125,
      124,  122,  121,  120,  119,  117,  116,  115,  114,  112,
      111,  110,  109,  107,  106,  105,  104,  102,  101,   99,
       97,   94,   90,   89,   88,   87,   86,   85,   83,   82,
       81,   80,   75,   73,   72,   71,   70,   69,   67,   66,
       65,   64,   63,   62,   61,   60,   59,   58,   57,   56,
       55,   54,   53,   51,   49,   48,   47,   46,   44,   42,

       41,   40,   39,   38,   37,   35,   34,   31,   30,   27,
       26,   25,   24,   23,   21,   16,    3,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "redbase.l"
#line 2 "redbase.l"
	#include <FlexLexer.h>
	#include "y.tab.h"
	extern void yyerror (const char *s);
	extern FlexLexer *lexer;
#line 900 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 12 "redbase.l"


#line 1008 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 435 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1218 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 14 "redbase.l"
{ return STRINGVAL; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 15 "redbase.l"
{ return FLOATVAL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 16 "redbase.l"
{ return INTVAL; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 18 "redbase.l"
{ return ATTRTYPE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 20 "redbase.l"
{ return SEMICOLON; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 21 "redbase.l"
{ return EQUALS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 22 "redbase.l"
{ return COMMA; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 23 "redbase.l"
{ return LPAREN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 24 "redbase.l"
{ return RPAREN; } 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 25 "redbase.l"
{ return DBLQUOTE; } 
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 27 "redbase.l"
{ return RESET; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 28 "redbase.l"
{ return BUFFER; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 29 "redbase.l"
{ return IO; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 31 "redbase.l"
{ return CREATE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 32 "redbase.l"
{ return DROP; 	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 33 "redbase.l"
{ return DELETE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 34 "redbase.l"
{ return FROM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 35 "redbase.l"
{ return TABLE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 36 "redbase.l"
{ return LOAD; 	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 37 "redbase.l"
{ return HELP; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 38 "redbase.l"
{ return PRINT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 39 "redbase.l"
{ return EQUIJOIN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 40 "redbase.l"
{ return EQUIJOIN_OPT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 41 "redbase.l"
{ return CROSS_PRODUCT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 42 "redbase.l"
{ return ON; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 43 "redbase.l"
{ return EXIT; 	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 45 "redbase.l"
{ return SHELL; }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 47 "redbase.l"
{ /*eat white space*/ } 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 48 "redbase.l"
{ return ID; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 49 "redbase.l"
{ return SEMICOLON; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 51 "redbase.l"
ECHO;
	YY_BREAK
#line 1247 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 435 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 435 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 434);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 51 "redbase.l"



/*
int main () {
	FlexLexer *lexer = new yyFlexLexer;
	while (lexer->yylex() != 0)
		;
	return 0;
}
*/

